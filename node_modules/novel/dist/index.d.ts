import { JSONContent, EditorProviderProps, BubbleMenuProps, Editor } from '@tiptap/react';
export { JSONContent, useCurrentEditor as useEditor } from '@tiptap/react';
import { Editor as Editor$1, Range } from '@tiptap/core';
export { Editor } from '@tiptap/core';
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as react from 'react';
import react__default, { ReactNode, ComponentPropsWithoutRef } from 'react';
import { Command } from 'cmdk';

declare const EditorRoot: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;
type EditorContentProps = {
    children: react__default.ReactNode;
    className?: string;
    initialContent?: JSONContent;
} & Omit<EditorProviderProps, "content">;
declare const EditorContent: ({ className, children, initialContent, ...rest }: EditorContentProps) => react_jsx_runtime.JSX.Element;
declare const defaultEditorProps: EditorProviderProps["editorProps"];

interface EditorBubbleProps extends Omit<BubbleMenuProps, "editor"> {
    children: ReactNode;
}
declare const EditorBubble: ({ children, tippyOptions, ...rest }: EditorBubbleProps) => react_jsx_runtime.JSX.Element | null;

interface EditorBubbleItemProps {
    children: ReactNode;
    asChild?: boolean;
    onSelect?: (editor: Editor) => void;
}
declare const EditorBubbleItem: react.ForwardRefExoticComponent<EditorBubbleItemProps & Omit<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">, "onSelect"> & react.RefAttributes<HTMLDivElement>>;

declare const EditorCommand: ({ children, className, ...rest }: ComponentPropsWithoutRef<typeof Command>) => react_jsx_runtime.JSX.Element;

interface EditorCommandItemProps {
    onCommand: ({ editor, range }: {
        editor: Editor$1;
        range: Range;
    }) => void;
}
declare const EditorCommandItem: react.ForwardRefExoticComponent<EditorCommandItemProps & Omit<{
    children?: react.ReactNode;
} & Omit<react.HTMLAttributes<HTMLDivElement>, "onSelect" | "value" | "disabled"> & {
    disabled?: boolean | undefined;
    onSelect?: ((value: string) => void) | undefined;
    value?: string | undefined;
    forceMount?: boolean | undefined;
} & react.RefAttributes<HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
declare const EditorCommandEmpty: react.ForwardRefExoticComponent<{
    children?: react.ReactNode;
} & react.HTMLAttributes<HTMLDivElement> & react.RefAttributes<HTMLDivElement>>;

export { EditorBubble, EditorBubbleItem, EditorCommand, EditorCommandEmpty, EditorCommandItem, EditorContent, EditorContentProps, EditorRoot, defaultEditorProps };
